use super::{PUBLIC_KEY_LENGTH, REPRESENTATIVE_LENGTH};
use crate::{Error, Result};

use getrandom::getrandom;
use libc::{int32_t, size_t};

pub(crate) const DECODE_FAILURE: &'static str = "elligator2 decode failed";

const MASK_UNSET_BYTE: u8 = 0x3f;
const MASK_SET_BYTE: u8 = 0xC0;

#[no_mangle]
extern "C" {

    // Takes as input a 32-byte little endian string (technically 255 bits
    // padded to 32 bytes)
    //
    // Returns 0 if string could not be decoded, i.e., does not correspond to
    // an elliptic curve point (highly unlikely). If possible, outputs 32 byte
    // x-coord of curve25519 point corresponding to input string
    fn _decode_c(out: *mut u8, input: *const u8) -> int32_t;

    // Takes as input 32 byte little endian encodable curve25519 point;
    // high order bit is sign of y value
    // Outputs 255-bit (little endian) uniform-looking 32-byte string
    // Returns 0 if point could not be encoded as a string, returns 1 otherwise
    fn _encode_c(out: *mut u8, input: *const u8) -> int32_t;
}

pub fn encode(pubkey: [u8; PUBLIC_KEY_LENGTH]) -> Option<[u8; REPRESENTATIVE_LENGTH]> {
    let mut out = [0_u8; REPRESENTATIVE_LENGTH];
    let ret_code = unsafe { _encode_c(out.as_mut_ptr(), pubkey.as_ptr()) };

    if ret_code == 0 {
        // failed to encode to a point on the curve
        return None;
    }
    let mut mask_byte = [0_u8];
    getrandom(&mut mask_byte);

    out[31] |= MASK_SET_BYTE & mask_byte[0];

    Some(out)
}

pub fn decode(repres: [u8; REPRESENTATIVE_LENGTH]) -> Result<[u8; PUBLIC_KEY_LENGTH]> {
    let mut out = [0_u8; PUBLIC_KEY_LENGTH];
    let mut r_sign_cleared = repres;
    r_sign_cleared[31] &= MASK_UNSET_BYTE;
    let ret_code = unsafe { _decode_c(out.as_mut_ptr(), r_sign_cleared.as_ptr()) };

    if ret_code == 0 {
        // failed to decode
        return Err(Error::Crypto(DECODE_FAILURE.into()));
    }

    Ok(out)
}

#[cfg(test)]
mod test {
    use super::*;
    use x25519_dalek::{PublicKey, StaticSecret};

    #[test]
    fn elligator_ntor_test_vectors() -> Result<()> {
        for (i, vector) in ntor_valid_test_vectors().iter().enumerate() {
            let input_key: [u8; 32] = hex::decode(vector[0]).unwrap().try_into().unwrap();
            let true_pubkey = vector[1];
            let true_repres = vector[2];

            let privkey = StaticSecret::from(input_key);
            let pubkey = PublicKey::from(&privkey);
            assert_eq!(
                true_pubkey,
                hex::encode(pubkey.to_bytes()),
                "({i}) bad pubkey from privkey"
            );

            // let mut repres = encode(pubkey.to_bytes()).unwrap();
            // repres[31] &= MASK_UNSET_BYTE;
            // assert_eq!(true_repres, hex::encode(repres), "({i}) bad representative from pubkey");
            let repres: [u8; 32] = hex::decode(vector[2]).unwrap().try_into().unwrap();

            let pubkey2 = decode(repres)?;
            assert_eq!(
                true_pubkey,
                hex::encode(pubkey2),
                "({i}) bad pubkey from true representative"
            );
        }

        for (i, vector) in ntor_invalid_test_vectors().iter().enumerate() {
            let input_key: [u8; 32] = hex::decode(vector[0]).unwrap().try_into().unwrap();
            let true_pubkey = vector[1];
            let pubkey_bytes: [u8; 32] = hex::decode(vector[1]).unwrap().try_into().unwrap();

            let privkey = StaticSecret::from(input_key);
            let pubkey = PublicKey::from(&privkey);
            assert_ne!(
                true_pubkey,
                hex::encode(pubkey.to_bytes()),
                "({i}) [bad_case] somehow generate matching pubkey from bad privkey"
            );
            //assert_eq!(None, encode(pubkey_bytes), "({i}) [bad case] expected None - got representative");
            if hex::encode(encode(pubkey_bytes).unwrap()) == vector[2] {
                println!("({i}) [bad case] !!!` expected None - got representative");
            }

            if encode(pubkey.to_bytes()) != None {
                println!("({i}) [bad case] expected None - got representative");
            }
        }

        Ok(())
    }

    /// returns a set of keypair encodings generated by (a fork of) the golang
    /// implementation agl/ed25519 which is used by the mainstream obfs4
    /// library. Each set of three strings is
    ///
    ///   1) a generated private key scalar,
    ///   2) the associated public key point
    ///   3) the successfully created representative
    ///
    /// All of these are valid keypairs and our public key to
    /// representative implementation (and repres-to-pubkey) should match and
    /// handle these cases.
    ///
    fn ntor_valid_test_vectors() -> Vec<Vec<&'static str>> {
        vec![
            vec![
                "eec0c0e43a2f693557dac4938c9a0f44be8bf7999399f26a24e5eab3267517c8",
                "309d1f477c62df666f47b87930d1883c072d007a169c03d1c231efe2e51cae1f",
                "bfd7e6dc33b735403cf6c7235513463843db8e1d2c16e62f0d5cacc8a3817515",
            ],
            vec![
                "d27f87a4850f85ef5211094eb417bc8fb9441dd8eedba8def6fd040da93fdf94",
                "bb6fe9e93c929e104a6b9f956c5de1fdc977899a781d50e76dd8f8852f19e635",
                "420c98e6ac9cabaccf54e02034916df64a45ad1e7799b5d2ab0403073c6f6a21",
            ],
            vec![
                "54b0d4e7110fb3a6ca5424fa7ffdc7cc599f9280df9759d1eb5d04186a4e82dd",
                "f305e32fbd38dd1e6b04ba32620c6b8db121ed3216f7118875580bd454eb077d",
                "a2b1a54463ad048ea9780fe2f92e0517636d2cd537d77a18cb6be03f1f991c04",
            ],
            vec![
                "9ce200c8a0c3e617c7c5605dc60d1ce67e30a608c492143d643880f91594a6dd",
                "56a2e451811eb62c78090c3d076f4b179b2e9baa4d80188a3db319301031191b",
                "c16f22f4899aae477d37c250164d10c9c898a820bf790b1532c3bc379b8d733e",
            ],
            vec![
                "98f09f9dedc813654e4ba28c9cd545587b20c6133603f13d8d4da2b67b4eab8c",
                "210d599d6b8d1659e4a6eb98fdebd1a7024b22ba148af2a603ab807735af6a57",
                "fc4ad471aff8243195ab6778054b0b243f93b4d31d5ac3a5bda9354dc3def735",
            ],
            vec![
                "fa850ae6663a8c7b84c71c6391e0b02df2d6adbc30a03b961c4b496b9979cf9d",
                "7fc7a4a8ae33cd045b064d1618689a7e16c87ce611f8f519433b10134dc57b04",
                "062d292892515a6a9e71e1430cc593e5cf90e4c18d7c0c0eaae7a07768e6f713",
            ],
            // These are valid in obfs4, but here the representatives are
            // not generated by the public keys ????
            //
            // Even weirder, the representative translates to the correct pubkey
            vec![
                "a06917dc2988e4b51559ab26e25fd920e8fec2f8f2fe0f4c3c725dce06de7867",
                "868603c764dff5f6db6f963237731452c469dfa2c8c5b682cfec85fc38661415",
                "2bdd5f3dcaeefa352f200306be3471ad90a0a0ac4b6abba44230e284a852b813",
            ],
            vec![
                "7acad18a021a568d2abaf079d046f5eb55e081a32b00d4f6c77f8b8c9afed866",
                "8e0f52904421469a46b2d636b9d17595573071d16ebff280fc88829b5ef8bd4f",
                "abc0de8594713993eab06144fe9b6d7bd04227c62bda19ef984008a93161fb33",
            ],
            vec![
                "c547b93c519a1c0b40b71fe7b08e13b38639564e9317f6b58c5f99d5ad82471a",
                "687fe9c6fe84e94ef0f7344abdac92dfd60dabc6156c1a3eea19d0d06705b461",
                "8b0ea3b2215bf829aedd250c629557ca646515861aa0b7fc881c50d622f9ac38",
            ],
            vec![
                "77e48dfa107bbfdda73f50ec2c38347e4fcc9c38866adb75488a2143993a058f",
                "7d124e12af90216f26ce3198f6b02e76faf990dd248cdb246dd80d4e1fef3d4d",
                "128481624af3015c6226428a247514370800f212a7a06c90dfe4f1aa672d3b3e",
            ],
        ]
    }

    fn ntor_invalid_test_vectors() -> Vec<Vec<&'static str>> {
        vec![
            vec![
                "48a02d02abc66ee28267b19116b383a4c4faa70af1f350379fd60e29dae5ea21",
                "8bf4f230c5324c48a0b632dd2d67c494ebe9e93f0e5354204ef23014063f497a",
                "02e959408444ac861827d7b01654da9da649e69b0d8a5498ecb1b641fc3c7619",
            ],
            vec![
                "0f5443e18669d08371500e283c0377368b1816ff9575936182d41e3d6166b9fa",
                "8bf4f230c5324c48a0b632dd2d67c494ebe9e93f0e5354204ef23014063f497a",
                "02e959408444ac861827d7b01654da9da649e69b0d8a5498ecb1b641fc3c7619",
            ],
            vec![
                "9df70496c00056c9e3442272c1f1684a8ee2a2b20ce17392b762dcb458865530",
                "521dd6a9c01b5588679a070569db84bb23355d39b91d32c06efe89f421752343",
                "14e5291ac092e39518943f8097fd7a003b37acb50c10fdace8ec2950025bd012",
            ],
            vec![
                "ebdb5427cd3ae996216b3ba79522681af18fa94824c7aa36c442478f1d5d23e4",
                "521dd6a9c01b5588679a070569db84bb23355d39b91d32c06efe89f421752343",
                "14e5291ac092e39518943f8097fd7a003b37acb50c10fdace8ec2950025bd012",
            ],
            vec![
                "5230ac46a938bb3205c8f99272dc0caa1c47b2cd719dd5aecb29450973e62b81",
                "521dd6a9c01b5588679a070569db84bb23355d39b91d32c06efe89f421752343",
                "14e5291ac092e39518943f8097fd7a003b37acb50c10fdace8ec2950025bd012",
            ],
            vec![
                "32cd0ea81876b019f4e3190fa80268ab10347c043cefdc96b687884a5f8c7e6f",
                "521dd6a9c01b5588679a070569db84bb23355d39b91d32c06efe89f421752343",
                "14e5291ac092e39518943f8097fd7a003b37acb50c10fdace8ec2950025bd012",
            ],
            vec![
                "8f5eb303fce954c54aea1769a47f3913ec22e3d03884f064f07acee21b3c1338",
                "213411508e23a553a2e06dac5c42e7f297520ede69470ee0943057e03d6e2b28",
                "aae40267c6e4b14a0da9e5f885d73ade5e0e1f7e81b8293ff499c969087a473a",
            ],
            vec![
                "0e0de96b5e4d7bc74fb5cba43953891de9423c0308e65a389194682f63009578",
                "228fe35d08c1bd107dcdb3456b764b9b793387201deb5dc3f890d9a616acee53",
                "9552c7e4037de3876bb3e3070b065e508dbc3bafc0f75a455117d2eb4c19f009",
            ],
            vec![
                "b8ba4cbc4f1a9087dfb8cf9162852afd9eb92ae6cebce526835ba87659d013e6",
                "f683f722ca0919bccc6f5bce7232fa8735ffadb3b8a2c9e778df120736279c1b",
                "2a7591b2e9aa3f6f6e9d3c64e39d408a941fffa99f2e52ad2eeb7ba88279540a",
            ],
            vec![
                "fe3efd8e7b1ccbdfc570097a125ef7845a5da2509eecca872d4fe4a3dbe48994",
                "f683f722ca0919bccc6f5bce7232fa8735ffadb3b8a2c9e778df120736279c1b",
                "2a7591b2e9aa3f6f6e9d3c64e39d408a941fffa99f2e52ad2eeb7ba88279540a",
            ],
        ]
    }
}
